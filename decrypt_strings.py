import idc
import idautils
 
dec_routine = 0x00414AA8
 
calc_tbl = [0x00, 0xD3, 0xBA, 0x30, 0xD7, 0xD8, 0xC1, 0xC9, 0xEB, 0x84, 0xAD, 0x88, 0x9C, 0x47, 0x74, 0xBC, 0x6D, 0x43, 0x40, 0x2B, 0xAE, 0x4B, 0x60, 0x5D, 0x5A, 0xEC, 0x31, 0xF3, 0x9F, 0x56, 0x1F, 0x1E, 0x93, 0x57, 0x5B, 0xF7, 0xC0, 0x2C, 0x7C, 0xC5, 0x69, 0x29, 0x90, 0x13, 0x25, 0xE4, 0xA7, 0x99, 0x03, 0x1A, 0xCA, 0x4C, 0xDA, 0x9A, 0x9E, 0xF4, 0xDB, 0x9D, 0xA0, 0x65, 0xAF, 0xB3, 0xF5, 0x51, 0x12, 0x58, 0x7D, 0x11, 0x6A, 0x5C, 0xF0, 0x0D, 0x85, 0x7E, 0xBE, 0x15, 0x33, 0xB4, 0x7A, 0xFD, 0xAC, 0x3F, 0x81, 0xFF, 0xED, 0x5E, 0x1D, 0x21, 0x41, 0xAA, 0x18, 0x22, 0x45, 0x17, 0x55, 0x96, 0x16, 0xA3, 0x95, 0xA1, 0xD4, 0x3B, 0xEA, 0xE6, 0xBF, 0x28, 0x44, 0x89, 0xD9, 0x10, 0xE7, 0xA8, 0xAB, 0x8A, 0xCE, 0xD2, 0x0E, 0xCF, 0x8D, 0xA2, 0xDC, 0xC8, 0x4E, 0xDD, 0x26, 0x42, 0x49, 0xE5, 0x8B, 0x52, 0xA4, 0xA5, 0x09, 0x48, 0xF8, 0xA6, 0x0B, 0x6B, 0x71, 0x80, 0x92, 0x76, 0xB5, 0xF9, 0x2A, 0xB6, 0x8C, 0x20, 0xCB, 0x62, 0x5F, 0xC6, 0xEE, 0x2F, 0x35, 0xBB, 0x0C, 0x39, 0x36, 0x1C, 0x3A, 0x63, 0x77, 0x61, 0x82, 0x83, 0x87, 0x2E, 0x6F, 0xC2, 0x59, 0x70, 0x50, 0x0A, 0x14, 0x3C, 0xCC, 0xC7, 0xE8, 0x3D, 0x4D, 0x8E, 0x91, 0xC3, 0xD0, 0xE9, 0x02, 0x9B, 0x0F, 0xCD, 0x4A, 0x68, 0x24, 0x06, 0xA9, 0xB7, 0xEF, 0x27, 0x97, 0xB1, 0x79, 0x07, 0x32, 0x94, 0xB0, 0xBD, 0x72, 0x75, 0xB8, 0xF1, 0x73, 0x01, 0x64, 0xF6, 0xDE, 0x04, 0x05, 0x6C, 0x34, 0x38, 0x78, 0x7B, 0xD6, 0xFA, 0xF2, 0xFB, 0xFE, 0xFC, 0x2D, 0x7F, 0x67, 0x6E, 0xB2, 0xB9, 0x66, 0x08, 0x19, 0x54, 0x98, 0xC4, 0x46, 0xD1, 0xE0, 0x1B, 0x37, 0x3E, 0xD5, 0x23, 0x86, 0x8F, 0xDF, 0xE1, 0xE3, 0x4F, 0xE2, 0x53]
 
#----------------------------------------------------------------------
def get_encrypted_bytes(addr):
    """"""
    enc_bytes = []
    enc_bytes_addr = idc.get_wide_dword(idc.get_operand_value(addr,1))
     
    while idc.get_wide_byte(enc_bytes_addr) != 0x0:
        enc_bytes.append(idc.get_wide_byte(enc_bytes_addr))
        enc_bytes_addr += 1
     
    return enc_bytes    
 
#----------------------------------------------------------------------
def decrypt(enc_str):
    """"""
    plaint_t = ""
    decStr = [0] * len(enc_str)
    calc_tbl_val = calc_tbl[enc_str[0]]
    tmp1 = calc_tbl_val % 7
    tmp2 = calc_tbl_val % 9
    strLen = len(enc_str) - 1
    j = 2
    for i in range(strLen):
        c = calc_tbl[enc_str[j-1]] - tmp2 * (j - 1)
        decStr[j-1] = c & 0xFF
        j+= 1
     
    for i in decStr[tmp1+1:]:
        plaint_t+= chr(i)
     
    return plaint_t
 
#----------------------------------------------------------------------
def decrypt_strings(func_addr):
    """"""
    for x in idautils.XrefsTo(func_addr, 0):
        org_addr = x.frm
        curr_addr = x.frm
        addr_minus_20 = curr_addr - 20
         
        while curr_addr >= addr_minus_20:
            curr_addr = idc.prev_head(curr_addr)
            if 'edx' in idc.print_operand(curr_addr, 0) and idc.get_operand_type(curr_addr, 1) == idc.o_mem:
                enc_bytes = get_encrypted_bytes(curr_addr)
                dec_str = decrypt(enc_bytes)
                print("org_addr: %s, decrypted string: %s" % (hex(org_addr), dec_str))
                idc.set_cmt(org_addr, dec_str, 0)
            elif 'eax' in idc.print_operand(curr_addr, 0) and idc.get_operand_type(curr_addr, 1) == idc.o_mem:
                enc_bytes = get_encrypted_bytes(curr_addr)
                dec_str = decrypt(enc_bytes)
                print("org_addr: %s, decrypted string: %s" % (hex(org_addr), dec_str))
                idc.set_cmt(org_addr, dec_str, 0)
         
#----------------------------------------------------------------------
def main():
    """"""
    decrypt_strings(dec_routine)
 
if __name__ == '__main__':
    main()